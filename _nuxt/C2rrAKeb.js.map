{"version":3,"file":"C2rrAKeb.js","sources":["../../../../pages/developer/tokens/index.vue"],"sourcesContent":["<template>\n  <div>\n    <v-h1>Service keys & tokens</v-h1>\n    <v-info\n      >Service keys and tokens are used to authenticate your server requests or to generate signatures for various data.\n      <NuxtLink to=\"https://rtfm.dbservices.to/#/services-and-features/overview\">Services Documentation</NuxtLink>.</v-info\n    >\n    <v-button\n      to=\"/developer/tokens/create\"\n      variant=\"primary\"\n      class=\"mt-5\"\n    >\n      Create service token or key\n    </v-button>\n\n    <v-table class=\"mt-5\">\n      <template #head>\n        <v-tr>\n          <v-th>App identifier</v-th>\n          <v-th>Token or key</v-th>\n          <v-th>Type</v-th>\n          <v-th>Added at</v-th>\n          <v-th></v-th>\n        </v-tr>\n      </template>\n\n      <template #body>\n        <v-tr\n          v-for=\"token of tokens\"\n          :key=\"token.token\"\n        >\n          <v-td>{{ getAppLabel(token.app_identifier) }}</v-td>\n          <v-td>{{ token.token }}</v-td>\n          <v-td>{{ capitalize(token.token_type) }}</v-td>\n          <v-td>{{ new Date(token.added_at * 1000).toLocaleString() }}</v-td>\n          <v-td class=\"text-right\">\n            <v-button\n              variant=\"danger\"\n              :loading=\"tokenBeingDeleted === token.token\"\n              @click=\"deleteToken(token.token)\"\n            >\n              Delete\n            </v-button>\n          </v-td>\n        </v-tr>\n      </template>\n    </v-table>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { capitalize } from \"lodash-es\"\n\nconst tokens = ref(await getServiceTokens())\n\nconst apps = await getApps()\nfunction getAppLabel(id: string) {\n  const label = apps.find((app) => app.identifier === id)?.label\n  if (!label) {\n    return id\n  }\n\n  return `${label} - ${id}`\n}\n\nconst tokenBeingDeleted = ref(\"\")\nasync function deleteToken(token: string) {\n  if (tokenBeingDeleted.value || !confirm(\"Are you sure you want to delete this token/key?\")) {\n    return\n  }\n\n  tokenBeingDeleted.value = token\n  try {\n    await deleteServiceToken({ token })\n\n    const idx = tokens.value.findIndex((t) => t.token === token)\n    tokens.value.splice(idx, 1)\n\n    const { notifySuccess } = useNotification()\n    notifySuccess(\"Service token/key was deleted\")\n  } finally {\n    tokenBeingDeleted.value = \"\"\n  }\n}\n</script>\n"],"names":["tokens","ref","__temp","__restore","_withAsyncContext","getServiceTokens","apps","getApps","getAppLabel","id","label","_a","app","tokenBeingDeleted","deleteToken","token","deleteServiceToken","idx","t","notifySuccess","useNotification"],"mappings":"4eAqDA,MAAMA,EAASC,GAAI,CAAAC,EAAAC,CAAA,EAAAC,EAAA,IAAMC,EAAiB,CAAA,kBAAC,EAErCC,GAAO,CAAAJ,EAAAC,CAAA,EAAAC,EAAA,IAAMG,GAAQ,mBAC3B,SAASC,EAAYC,EAAY,OACzB,MAAAC,GAAQC,EAAAL,EAAK,KAAMM,GAAQA,EAAI,aAAeH,CAAE,IAAxC,YAAAE,EAA2C,MACzD,OAAKD,EAIE,GAAGA,CAAK,MAAMD,CAAE,GAHdA,CAIX,CAEM,MAAAI,EAAoBZ,EAAI,EAAE,EAChC,eAAea,EAAYC,EAAe,CACxC,GAAI,EAAAF,EAAkB,OAAS,CAAC,QAAQ,iDAAiD,GAIzF,CAAAA,EAAkB,MAAQE,EACtB,GAAA,CACI,MAAAC,EAAmB,CAAE,MAAAD,CAAA,CAAO,EAE5B,MAAAE,EAAMjB,EAAO,MAAM,UAAWkB,GAAMA,EAAE,QAAUH,CAAK,EACpDf,EAAA,MAAM,OAAOiB,EAAK,CAAC,EAEpB,KAAA,CAAE,cAAAE,GAAkBC,IAC1BD,EAAc,+BAA+B,CAAA,QAC7C,CACAN,EAAkB,MAAQ,EAC5B,EACF"}