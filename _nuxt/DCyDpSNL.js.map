{"version":3,"file":"DCyDpSNL.js","sources":["../../../../pages/developer/test-devices/index.vue"],"sourcesContent":["<template>\n  <div>\n    <v-h1>Test devices</v-h1>\n    <v-info\n      >Here you can add test devices. Such devices can behave differently depending of failure domain that you chosen. For such devices, you can\n      install your app while it is not listed in store and attach your debugger to your app once it is installed.\n      <NuxtLink to=\"https://rtfm.dbservices.to/#/app-development/testing-with-failure-domains\">Testing Documentation</NuxtLink>.</v-info\n    >\n    <v-button\n      to=\"/developer/test-devices/manage/new\"\n      variant=\"primary\"\n      class=\"mt-5\"\n    >\n      Add new test device\n    </v-button>\n\n    <v-table class=\"mt-5\">\n      <template #head>\n        <v-tr>\n          <v-th>UDID</v-th>\n          <v-th>Failure domain</v-th>\n          <v-th></v-th>\n        </v-tr>\n      </template>\n\n      <template #body>\n        <v-tr\n          v-for=\"device of devices\"\n          :key=\"device.udid\"\n        >\n          <v-td>{{ device.udid }}</v-td>\n          <v-td>{{ getFailureDomainDescription(device.failure_domain_identifier) }}</v-td>\n          <v-td>\n            <div class=\"flex justify-end gap-1.5\">\n              <v-button :to=\"`/developer/test-devices/manage/${device.udid}`\">Edit</v-button>\n              <v-button\n                variant=\"danger\"\n                :loading=\"deviceBeingDeleted === device.udid\"\n                @click=\"deleteDevice(device.udid)\"\n              >\n                Delete\n              </v-button>\n            </div>\n          </v-td>\n        </v-tr>\n      </template>\n    </v-table>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nconst devices = ref(await getTestDevices())\nconst failureDomains = await getFailureDomains()\nfunction getFailureDomainDescription(id: string) {\n  return failureDomains.find((d) => d.identifier === id)?.description\n}\n\nconst deviceBeingDeleted = ref(\"\")\nasync function deleteDevice(udid: string) {\n  if (deviceBeingDeleted.value || !confirm(\"Are you sure you want to delete this device?\")) {\n    return\n  }\n\n  deviceBeingDeleted.value = udid\n  try {\n    await deleteTestDevice({ udid })\n\n    const idx = devices.value.findIndex((device) => device.udid === udid)\n    devices.value.splice(idx, 1)\n\n    const { notifySuccess } = useNotification()\n    notifySuccess(\"Device was deleted\")\n  } finally {\n    deviceBeingDeleted.value = \"\"\n  }\n}\n</script>\n"],"names":["devices","ref","__temp","__restore","_withAsyncContext","getTestDevices","failureDomains","getFailureDomains","getFailureDomainDescription","id","_a","d","deviceBeingDeleted","deleteDevice","udid","deleteTestDevice","idx","device","notifySuccess","useNotification"],"mappings":"2dAmDA,MAAMA,EAAUC,GAAI,CAAAC,EAAAC,CAAA,EAAAC,EAAA,IAAMC,EAAe,CAAA,kBAAC,EACpCC,GAAiB,CAAAJ,EAAAC,CAAA,EAAAC,EAAA,IAAMG,GAAkB,mBAC/C,SAASC,EAA4BC,EAAY,OAC/C,OAAOC,EAAAJ,EAAe,KAAMK,GAAMA,EAAE,aAAeF,CAAE,IAA9C,YAAAC,EAAiD,WAC1D,CAEM,MAAAE,EAAqBX,EAAI,EAAE,EACjC,eAAeY,EAAaC,EAAc,CACxC,GAAI,EAAAF,EAAmB,OAAS,CAAC,QAAQ,8CAA8C,GAIvF,CAAAA,EAAmB,MAAQE,EACvB,GAAA,CACI,MAAAC,EAAiB,CAAE,KAAAD,CAAA,CAAM,EAEzB,MAAAE,EAAMhB,EAAQ,MAAM,UAAWiB,GAAWA,EAAO,OAASH,CAAI,EAC5Dd,EAAA,MAAM,OAAOgB,EAAK,CAAC,EAErB,KAAA,CAAE,cAAAE,GAAkBC,IAC1BD,EAAc,oBAAoB,CAAA,QAClC,CACAN,EAAmB,MAAQ,EAC7B,EACF"}